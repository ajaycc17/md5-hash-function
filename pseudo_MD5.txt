// Pseudocode:

// declare arrays of constants t[64] and s[64]
// initialize MD buffers
// A = 0x67452301
// B = 0xefcdab89
// C = 0x98badcfe
// D = 0x10325476
// copy MD buffers to another variable
// a = A
// b = B
// c = C
// d = D
// Check the file/message size in bits and then, ----------------------------step 1
// get the size of message(m) and compute:
// p = len/512
// q = len % 512
// if q<64:
    // r = ((1+a)*512-m)-64
// else if q==64:
    // r = 0
// else:
    // if ((1+a)*512-m)<64:
        // r = ((a+2)*512-m)-64
    // else:
        // r = ((1+a)*512-m)-64
// if r != 0:
    // add one 1 and (r-1) 0's to m and put it into m1
// append length bits (original length mod 2^64)-----------------------------step 2
// Split m2 into 512-bit blocks----------------------------------------------step 3
// for each 512-bit block
    // Further split each 512-bit block into 16 sub-blocks of 32-bit each----step 4
    // for (i=0 to 63):
        // if (i=0 to i=15):
        // res = (b & c) | (!b & d)
        // if (i=16 to i=31):
        // res = (b & d) | (c & !d)
        // if (i=32 to i=47):
        // res = b ^ c ^ d
        // if (i=48 to i=63):
        // res = c ^ (b | !d)

        // res = a + res + m1[i] + t[i]
        // a = d
        // d = c
        // c = b
        // b = b + CLS(res, s[i])
    // come out of for inner loop
    // a = a + A
    // b = b + B
    // c = c + C
    // d = d + D
// come out of outer for loop
// hash = concatenate(a,b,c,d)---------------------------------------------final output